import { createClient } from '@supabase/supabase-js'

// Ëøô‰∫õÂÄºÈúÄË¶Å‰ªé Supabase È°πÁõÆËÆæÁΩÆ‰∏≠Ëé∑Âèñ
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://placeholder.supabase.co'
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || 'placeholder-key'

// Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáèÊòØÂê¶ÈÖçÁΩÆ
const isConfigured = supabaseUrl !== 'https://placeholder.supabase.co' && supabaseAnonKey !== 'placeholder-key'

export const supabase = isConfigured ? createClient(supabaseUrl, supabaseAnonKey) : null

// Êï∞ÊçÆÂ∫ìË°®Âêç
export const TABLES = {
  MESSAGES: 'messages',
  PHOTOS: 'photos',
  QA_PAIRS: 'qa_pairs'
}

// Ê®°ÊãüÊï∞ÊçÆÔºàÂΩì Supabase Êú™ÈÖçÁΩÆÊó∂‰ΩøÁî®Ôºâ
const mockMessages = [
  {
    id: 1,
    name: 'Â∞èÁêõ',
    text: 'Ê¨¢ËøéÊù•Âà∞Êàë‰ª¨ÁöÑÊ∏©È¶®Â∞èÂ±ãÔºÅüíï',
    likes: 5,
    created_at: new Date().toISOString()
  },
  {
    id: 2,
    name: 'Â∞èÂèØÁà±',
    text: 'ËøôÈáåÁúüÊòØ‰∏Ä‰∏™Ê∏©ÊöñÁöÑÂú∞ÊñπÂë¢ÔΩû',
    likes: 3,
    created_at: new Date(Date.now() - 3600000).toISOString()
  }
]

const mockPhotos = [
  {
    id: 1,
    url: 'https://images.unsplash.com/photo-1518895949257-7621c3c786d7?w=400&h=400&fit=crop',
    tag: 'Ê∏©È¶®Êó∂ÂÖâ',
    created_at: new Date().toISOString()
  },
  {
    id: 2,
    url: 'https://images.unsplash.com/photo-1529333166437-7750a6dd5a70?w=400&h=400&fit=crop',
    tag: 'ÁæéÂ•ΩÂõûÂøÜ',
    created_at: new Date(Date.now() - 86400000).toISOString()
  }
]

const mockQAPairs = [
  {
    id: 1,
    q: '‰Ω†ÊúÄÂñúÊ¨¢‰ªÄ‰πàÈ¢úËâ≤Ôºü',
    a: 'ÊàëÊúÄÂñúÊ¨¢Á≤âËâ≤ÔºåÂõ†‰∏∫ÂÆÉÂæàÊ∏©È¶®ÂèØÁà±ÔΩû',
    created_at: new Date().toISOString()
  },
  {
    id: 2,
    q: '‰ªäÂ§©ÂøÉÊÉÖÊÄé‰πàÊ†∑Ôºü',
    a: '‰ªäÂ§©ÂøÉÊÉÖÂæàÂ•ΩÔºåÂõ†‰∏∫Êúâ‰Ω†Âú®Ë∫´ËæπÔºÅ',
    created_at: new Date(Date.now() - 86400000).toISOString()
  }
]

// Ê∂àÊÅØÁõ∏ÂÖ≥Êìç‰Ωú
export const messageAPI = {
  // Ëé∑ÂèñÊâÄÊúâÊ∂àÊÅØ
  async getMessages() {
    if (!isConfigured) {
      // Ê®°ÊãüÁΩëÁªúÂª∂Ëøü
      await new Promise(resolve => setTimeout(resolve, 500))
      return mockMessages
    }
    
    try {
      const { data, error } = await supabase
        .from(TABLES.MESSAGES)
        .select('*')
        .order('created_at', { ascending: false })
      
      if (error) throw error
      return data
    } catch (error) {
      console.error('Ëé∑ÂèñÁïôË®ÄÂ§±Ë¥•:', error)
      return mockMessages
    }
  },

  // Ê∑ªÂä†Êñ∞Ê∂àÊÅØ
  async addMessage(name, text) {
    if (!isConfigured) {
      const newMessage = {
        id: Date.now(),
        name,
        text,
        likes: 0,
        created_at: new Date().toISOString()
      }
      mockMessages.unshift(newMessage)
      return newMessage
    }

    try {
      const { data, error } = await supabase
        .from(TABLES.MESSAGES)
        .insert([{ name, text }])
        .select()
      
      if (error) throw error
      return data[0]
    } catch (error) {
      console.error('Ê∑ªÂä†ÁïôË®ÄÂ§±Ë¥•:', error)
      throw error
    }
  },

  // ÁÇπËµûÊ∂àÊÅØ
  async likeMessage(id) {
    if (!isConfigured) {
      const message = mockMessages.find(m => m.id === id)
      if (message) {
        message.likes = (message.likes || 0) + 1
      }
      return message
    }

    try {
      const { data, error } = await supabase
        .from(TABLES.MESSAGES)
        .update({ likes: supabase.sql`likes + 1` })
        .eq('id', id)
        .select()
      
      if (error) throw error
      return data[0]
    } catch (error) {
      console.error('ÁÇπËµûÂ§±Ë¥•:', error)
      throw error
    }
  }
}

// ÁÖßÁâáÁõ∏ÂÖ≥Êìç‰Ωú
export const photoAPI = {
  // Ëé∑ÂèñÊâÄÊúâÁÖßÁâá
  async getPhotos() {
    if (!isConfigured) {
      await new Promise(resolve => setTimeout(resolve, 500))
      return mockPhotos
    }

    try {
      const { data, error } = await supabase
        .from(TABLES.PHOTOS)
        .select('*')
        .order('created_at', { ascending: false })
      
      if (error) throw error
      return data
    } catch (error) {
      console.error('Ëé∑ÂèñÁÖßÁâáÂ§±Ë¥•:', error)
      return mockPhotos
    }
  },

  // Ê∑ªÂä†Êñ∞ÁÖßÁâá
  async addPhoto(url, tag = '') {
    if (!isConfigured) {
      const newPhoto = {
        id: Date.now(),
        url,
        tag,
        created_at: new Date().toISOString()
      }
      mockPhotos.unshift(newPhoto)
      return newPhoto
    }

    try {
      const { data, error } = await supabase
        .from(TABLES.PHOTOS)
        .insert([{ url, tag }])
        .select()
      
      if (error) throw error
      return data[0]
    } catch (error) {
      console.error('Ê∑ªÂä†ÁÖßÁâáÂ§±Ë¥•:', error)
      throw error
    }
  },

  // ‰∏ä‰º†Êñá‰ª∂Âà∞Â≠òÂÇ®
  async uploadFile(file, path) {
    if (!isConfigured) {
      throw new Error('Supabase Êú™ÈÖçÁΩÆÔºåÊó†Ê≥ï‰∏ä‰º†Êñá‰ª∂')
    }

    try {
      const { data, error } = await supabase.storage
        .from('photos')
        .upload(path, file)
      
      if (error) throw error
      return data
    } catch (error) {
      console.error('‰∏ä‰º†Êñá‰ª∂Â§±Ë¥•:', error)
      throw error
    }
  },

  // Ëé∑ÂèñÊñá‰ª∂ÂÖ¨ÂÖ±URL
  getPublicUrl(path) {
    if (!isConfigured) {
      return `https://placeholder.supabase.co/storage/v1/object/public/photos/${path}`
    }

    const { data } = supabase.storage
      .from('photos')
      .getPublicUrl(path)
    
    return data.publicUrl
  }
}

// ÈóÆÁ≠îÁõ∏ÂÖ≥Êìç‰Ωú
export const qaAPI = {
  // Ëé∑ÂèñÊâÄÊúâÈóÆÁ≠îÂØπ
  async getQAPairs() {
    if (!isConfigured) {
      await new Promise(resolve => setTimeout(resolve, 500))
      return mockQAPairs
    }

    try {
      const { data, error } = await supabase
        .from(TABLES.QA_PAIRS)
        .select('*')
        .order('created_at', { ascending: false })
      
      if (error) throw error
      return data
    } catch (error) {
      console.error('Ëé∑ÂèñÈóÆÁ≠îÂ§±Ë¥•:', error)
      return mockQAPairs
    }
  },

  // Ê∑ªÂä†Êñ∞ÈóÆÁ≠îÂØπ
  async addQAPair(question, answer) {
    if (!isConfigured) {
      const newQA = {
        id: Date.now(),
        q: question,
        a: answer,
        created_at: new Date().toISOString()
      }
      mockQAPairs.unshift(newQA)
      return newQA
    }

    try {
      const { data, error } = await supabase
        .from(TABLES.QA_PAIRS)
        .insert([{ q: question, a: answer }])
        .select()
      
      if (error) throw error
      return data[0]
    } catch (error) {
      console.error('Ê∑ªÂä†ÈóÆÁ≠îÂ§±Ë¥•:', error)
      throw error
    }
  },

  // ÊêúÁ¥¢Á≠îÊ°à
  async searchAnswer(question) {
    if (!isConfigured) {
      const lowerQuestion = question.toLowerCase()
      const match = mockQAPairs.find(qa => 
        qa.q.toLowerCase().includes(lowerQuestion) ||
        lowerQuestion.includes(qa.q.toLowerCase())
      )
      return match ? match.a : null
    }

    try {
      const { data, error } = await supabase
        .from(TABLES.QA_PAIRS)
        .select('*')
      
      if (error) throw error
      
      // ÁÆÄÂçïÁöÑÂÖ≥ÈîÆËØçÂåπÈÖç
      const lowerQuestion = question.toLowerCase()
      const match = data.find(qa => 
        qa.q.toLowerCase().includes(lowerQuestion) ||
        lowerQuestion.includes(qa.q.toLowerCase())
      )
      
      return match ? match.a : null
    } catch (error) {
      console.error('ÊêúÁ¥¢Â§±Ë¥•:', error)
      return null
    }
  }
}
